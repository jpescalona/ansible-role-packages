# vim: ai et ts=2 st=2 sw=2 :
---
- name: Find repositories with key_id
  set_fact:
    repo_with_key_url: '{{ packages_ubuntu_repositories | selectattr("key_id", "defined") | selectattr("enabled") | list }}'

# install check mode dependencies

- name: Install check mode dependencies python3
  apt:
    name: python3-apt
    cache_valid_time: 3600
  check_mode: false
  when: ansible_distribution_version | int > 16

# add repos

- name: Add apt keys
  apt_key:
    url: '{{ item.key_url }}'
    id: '{{ item.key_id | default(omit) }}'
  loop: '{{ repo_with_key_url }}'

- name: Add repositories
  apt_repository:
    filename: ansible
    repo: '{{ item.repo }}'
    state: '{{ "present" if item.enabled | bool else "absent" }}'
    update_cache: true
  loop: '{{ packages_ubuntu_repositories }}'

# unhold packages

- name: Hold packages
  shell: 'apt-mark -s hold {{ item }} && apt-mark hold {{ item }}'
  register: apt_mark_hold
  failed_when: false
  changed_when: apt_mark_hold.rc == 0 and "already" not in apt_mark_hold.stdout
  loop: '{{ packages_ubuntu_hold }}'

- name: Unhold packages
  shell: 'apt-mark -s unhold {{ item }} && apt-mark unhold {{ item }}'
  register: apt_mark_unhold
  failed_when: false
  changed_when: apt_mark_unhold.rc == 0 and "already" not in apt_mark_unhold.stdout
  loop: '{{ packages_ubuntu_unhold }}'

# pin packages

- name: Pin packages
  template:
    src: ansible
    dest: /etc/apt/preferences.d/ansible
    mode: 0644

# install packages

- name: Install apt packages
  apt:
    name: '{{ packages_ubuntu_install }}'
    update_cache: true
    cache_valid_time: 3600

# hold packages

- name: Hold packages
  shell: 'apt-mark -s hold {{ item }} && apt-mark hold {{ item }}'
  register: apt_mark_hold
  failed_when: false
  changed_when: apt_mark_hold.rc == 0 and "already" not in apt_mark_hold.stdout
  loop: '{{ packages_ubuntu_hold }}'

# unattended_upgrades

- name: Check if unnatended upgrades file exists
  stat:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
  register: unattended_file

- name: Install unattended upgrades
  apt:
    pkg:
      - unattended-upgrades
      - update-notifier-common
  when: packages_unattended_upgrades

- name: Uncomment updates
  replace:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^//(.*distro_codename.*updates.*)$'
    replace: '\1'
    mode: 0644
  when:
    - not packages_only_security_upgrades
    - unattended_file.stat.exists|bool

- name: Comment updates
  replace:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^[^/](.*distro_codename.*updates.*)$'
    replace: '//\1'
    mode: 0644
  when:
    - packages_only_security_upgrades
    - unattended_file.stat.exists|bool

- name: Uncomment backports
  replace:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^//(.*distro_codename.*backports.*)$'
    replace: '\1'
    mode: 0644
  when:
    - packages_ubuntu_update_backports
    - unattended_file.stat.exists|bool

- name: Comment backports
  replace:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^[^/](.*distro_codename.*backports.*)$'
    replace: '//\1'
    mode: 0644
  when:
    - not packages_ubuntu_update_backports
    - unattended_file.stat.exists|bool

- name: Uncomment automatic reboot
  replace:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^//(Unattended-Upgrade::Automatic-Reboot.*)$'
    replace: '\1'
    mode: 0644
  when:
    - unattended_file.stat.exists|bool

- name: Enable or disable automatic reboot
  replace:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^(U.*Automatic-Reboot.*")(true|false)(".*)$'
    replace: '\1{{ packages_automatic_reboot | string | lower }}\3'
    mode: 0644
  when:
    - unattended_file.stat.exists|bool

- name: Set reboot time
  replace:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '(.*Automatic-Reboot-Time.*)"..\:.."(.*)$'
    replace: '\1"{{ "%02d" | format(packages_automatic_reboot_hour | int) }}:{{ "%02d" | format(packages_automatic_reboot_minute | int) }}"\2'
    mode: 0644
  when:
    - unattended_file.stat.exists|bool
